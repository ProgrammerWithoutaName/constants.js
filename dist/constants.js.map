{"version":3,"file":"constants.js","sources":["../bower_components/almond/almond.js","helpers/domConstants.js","definitions/cssClasses.js","definitions/ids.js","helpers/format.js","helpers/nameValueObject.js","definitions/attributes.js","definitions/tags.js","definitions/events.js","definitions/localizations.js","constants.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                name = baseParts.concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"almond\", function(){});\n\n","define('helpers/domConstants',[], function() {\n  'use strict';\n\n  function buildDomConstantsObject(selectorSymbol) {\n    var domConstant, superAdd, createDomValue;\n\n    domConstant = nameValueObject.createNameValueObject({}, function(nameValue) {\n      return nameValue.value.name;\n    });\n\n    superAdd = domConstant.$add;\n\n    createDomValue = function(domValue) {\n      var selector = selectorSymbol + domValue;\n\n      return {\n        name: domValue,\n        selector: selector,\n        findElements: function() {\n          return domConstant.$findElements(selector);\n        }\n      };\n    };\n\n    domConstant.$add = function(nameValues) {\n      var domName, valuesToAdd;\n\n      valuesToAdd = {};\n\n      for (domName in nameValues) {\n        if (nameValues.hasOwnProperty(domName)) {\n          valuesToAdd[domName] = createDomValue(nameValues[name]);\n        }\n      }\n\n      superAdd(valuesToAdd);\n    };\n\n    domConstant.$setFindElementsFunction = function(findElements) {\n      domConstant.$findElements = findElements;\n    };\n\n    return domConstant;\n  }\n\n  return {\n    buildDomConstantsObject: buildDomConstantsObject\n  };\n});\n\n","define('definitions/cssClasses',['helpers/domConstants'], function(domConstants) {\n  'use strict';\n\n  var classes;\n\n  classes = domConstants.buildDomConstantsObject('.');\n  classes.$add({\n    active: 'active',\n    inactive: 'inactive'\n  });\n\n  return classes;\n});\n\n","define('definitions/ids',['helpers/domConstants'], function(domConstants) {\n  'use strict';\n\n  var ids;\n\n  ids = domConstants.buildDomConstantsObject('#');\n  ids.$add({});\n\n  return ids;\n});\n\n","define('helpers/format',[], function() {\n  'use strict';\n\n  function format(stringToFormat, values) {\n    return stringToFormat.replace(/{(\\w+)}/g, function(match, value) {\n      return values[value] !== undefined ? values[value] : match;\n    });\n  }\n\n  return format;\n});\n\n","define('helpers/nameValueObject',['helpers/format'], function(format) {\n  'use strict';\n\n  var nameExistsError, valueExistsError;\n\n  nameExistsError = 'name \"{name}\" is already in use, value is {value}';\n  valueExistsError = 'given name {givenName} with a value of \"{value}\" already exists with a name of \"{name}\"';\n\n  function createNameValueObject(addErrors, valueKeyFunction) {\n    var nameValueObject, valueNameObject, getValueKey;\n\n    getValueKey = valueKeyFunction || function(nameValue) {\n      return nameValue.value;\n    };\n\n    if (!addErrors) {\n      addErrors = {};\n    }\n    addErrors.add = 'can not overwrite add';\n\n    nameValueObject = {};\n    valueNameObject = {};\n\n    function canAdd(nameValue) {\n      return !addErrors[nameValue.name] && !nameValueObject[nameValue.name] && !valueNameObject[nameValue.value];\n    }\n\n    function addNameValue(nameValue) {\n      nameValueObject[nameValue.name] = nameValue.value;\n      valueNameObject[getValueKey(nameValue)] = nameValue.name;\n    }\n\n    function buildAddErrorsError(nameValue) {\n      return new Error(addErrors[nameValue.name]);\n    }\n\n    function buildNameExistsError(nameValue) {\n      return new Error(format(nameExistsError), nameValue);\n    }\n\n    function buildValueExistsError(nameValue) {\n      return new Error(format(valueExistsError),\n                      {givenName: nameValue.name,\n                        name: valueNameObject[getValueKey(nameValue)],\n                        value: getValueKey(nameValue)\n                      });\n    }\n\n    function throwRelevantError(nameValue) {\n      if (addErrors[nameValue.name]) {\n        throw buildAddErrorsError(nameValue);\n      }\n\n      if (nameValueObject[nameValue.name]) {\n        throw buildNameExistsError(nameValue);\n      }\n\n      if (valueNameObject[nameValue.name]) {\n        throw buildValueExistsError(nameValue);\n      }\n    }\n\n    function add(nameValues) {\n      var name, nameValue;\n\n      for (name in nameValues) {\n        nameValue = {name: name, value: nameValues[name]};\n\n        if (nameValues.hasOwnProperty(name)) {\n          if (canAdd(nameValue)) {\n            addNameValue({name: name, value: nameValues[name]});\n          } else {\n            throwRelevantError(nameValue);\n          }\n        }\n      }\n    }\n\n    nameValueObject.add = add;\n\n    return nameValueObject;\n  }\n\n  return {\n    createNameValueObject: createNameValueObject\n  };\n});\n\n","define('definitions/attributes',['helpers/nameValueObject'], function(nameValueObject) {\n  'use strict';\n\n  var attributes;\n\n  attributes = nameValueObject.createNameValueObject();\n  attributes.$add({\n    href: 'href',\n    source: 'src',\n    alt: 'alt',\n    title: 'title',\n    type: 'type',\n    width: 'width',\n    height: 'height',\n    style: 'style'\n  });\n\n  return attributes;\n});\n\n","define('definitions/tags',['helpers/nameValueObject'], function(nameValueObject) {\n  'use strict';\n\n  var tags, superAdd;\n\n  function buildHtmlTagValue(tagName) {\n    var html = '<' + tagName + ' />';\n\n    return {\n      html: html,\n      name: tagName,\n      buildElement: function() {\n        return tags.$elementBuilder(html);\n      }\n    };\n  }\n\n  tags = nameValueObject.createNameValueObject({}, function(nameValue) {\n    return nameValue.value.name;\n  });\n\n  superAdd = tags.$add;\n\n  tags.$add = function(nameValues) {\n    // we should be able to simply add the name, img, div, span, then make a tag out of it.\n    var givenValues, tagName;\n\n    tagName = {};\n\n    for (tagName in nameValues) {\n      if (nameValues.hasOwnProperty(tagName)) {\n        givenValues[tagName] = buildHtmlTagValue(nameValues[tagName]);\n      }\n    }\n\n    superAdd(givenValues);\n  };\n\n  tags.$setElementBuilderFunction = function(elementBuilder) {\n    tags.$elementBuilder = elementBuilder;\n  };\n\n  tags.$add({\n    image: 'img',\n    div: 'div',\n    span: 'span',\n    anchor: 'a',\n    input: 'input',\n    body: 'body',\n    head: 'head',\n    italic: 'i'\n  });\n\n  return tags;\n});\n\n","define('definitions/events',['helpers/nameValueObject'], function(nameValueObject) {\n  'use strict';\n\n  var events;\n\n  events = nameValueObject.createNameValueObject();\n  events.$add({\n    click: 'click'\n  });\n\n  return events;\n});\n\n","define('definitions/localizations',['helpers/nameValueObject'], function(nameValueObject) {\n  'use strict';\n\n  var localization, superAdd;\n\n  function buildLocalizationRequest(localizationValue) {\n    return function() {\n      return localization.$localizationValueRequest(localizationValue);\n    };\n  }\n\n  function buildLocalizationValue(localizationValue) {\n    return {\n      name: localizationValue,\n      getLocalizedValue: buildLocalizationRequest(localizationValue)\n    };\n  }\n\n  localization = nameValueObject.createNameValueObject({}, function(nameValue) {\n    return nameValue.value.name;\n  });\n\n  superAdd = localization.$add;\n\n  localization.$add = function(nameValues) {\n    var givenValues, localizationName;\n\n    givenValues = {};\n\n    for (localizationName in nameValues) {\n      if (nameValues.hasOwnProperty(localizationName)) {\n        givenValues[localizationName] = buildLocalizationValue(nameValues[localizationName]);\n      }\n    }\n\n    superAdd(givenValues);\n  };\n\n  localization.$setLocalizationRequest = function(localizationRequestFunction) {\n    localization.$localizationValueRequest = localizationRequestFunction;\n  };\n\n  localization.$add({});\n\n  return localization;\n});\n\n","define('constants',['definitions/cssClasses',\n  'definitions/ids',\n  'definitions/attributes',\n  'definitions/tags',\n  'definitions/events',\n  'definitions/localizations'\n], function(classes, ids, attributes, tags, events, localizations) {\n  'use strict';\n\n  // Object constructor\n  var constants = function(obj) {\n    return obj;\n  };\n\n  // Properties\n  constants.VERSION = '0.0.0';\n\n  constants.classes = classes;\n  constants.ids = ids;\n  constants.attributes = attributes;\n  constants.tags = tags;\n  constants.events = events;\n  constants.localizations = localizations;\n\n  return constants;\n});\n\n"]}